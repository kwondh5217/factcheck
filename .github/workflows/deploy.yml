name: Deploy Factcheck API

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: fachcheck/factcheck-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17.0.6

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Start MySQL in background (for migration)
        run: |
          docker run -d \
            --name temp-factcheck-mysql \
            -e MYSQL_ROOT_PASSWORD=factcheck \
            -e MYSQL_DATABASE=factcheck \
            -e MYSQL_USER=factcheck \
            -e MYSQL_PASSWORD=factcheck \
            -p 3306:3306 \
            mysql:8 --default-authentication-plugin=mysql_native_password

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be healthy..."
          for i in {1..20}; do
            docker exec temp-factcheck-mysql mysqladmin ping -h 127.0.0.1 --silent && break
            sleep 5
          done

      - name: Run Flyway migrations via Gradle
        run: ./gradlew flywayMigrate

      - name: Stop temporary MySQL
        run: docker rm -f temp-factcheck-mysql

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} .
          docker push $DOCKER_IMAGE:${{ github.sha }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: JWT_SECRET,CHROME_CLIENT_ID,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD
          script: |
            IMAGE="${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
            docker pull $IMAGE
            docker create --name temp $IMAGE
            docker cp temp:/app/tools/docker-compose.deploy.yml ./docker-compose.yml
            docker rm temp
            sed -i "s|\${TAG}|${{ github.sha }}|g" docker-compose.yml
            docker-compose --env-file .env.deploy down --remove-orphans
            docker-compose --env-file .env.deploy up -d --force-recreate
